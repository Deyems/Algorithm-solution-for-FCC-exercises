//FUNCTION TO SEARCH AN ARRAY
// AND RETURN THE NUMBER THAT
// PASSED THE TEST

function findElement(arr, func) {
  for(let i = 0; i < arr.length; ++i){
    if(func(arr[i])){
      return arr[i];
    }
  }
  return undefined;
}

findElement([1, 2, 3, 4], num => num % 2 === 0);


TITLE CASE A SENTENCE

function titleCase(str) {
  // return str;
  let arr = [];
  arr = str.split(" ");
  let uc = ""; //First Letter in each Word
  let otherLetters = "";
  let fullLetter = "";
  let sentence = "";
  for(let i = 0; i < arr.length; ++i){
    uc = arr[i].slice(0,1);
    otherLetters = arr[i].slice(1);
    fullLetter = uc.toUpperCase()+otherLetters.toLowerCase();
    sentence = sentence + fullLetter+" ";
    
  }
  return sentence.slice(0,-1);
}

titleCase("I'm a little tea pot");


//COPY AN ARRAY AND INSERT INTO ANOTHER ARRAY 
// WITHOUT DELETING ANY ELEMENT IN THE SECOND
//ARRAY
function frankenSplice(arr1, arr2, n) {
  // It's alive. It's alive!
  // return arr2;
  let newArr = arr2;
  for(let i = arr1.length-1; i >= 0; --i){
    newArr.splice(n,0,arr1[i]);
  }
  // console.log(newArr);
  return newArr;
}

frankenSplice([1, 2, 3], [4, 5, 6], 1);



//using a Fxn to return the Index of
// WHERE A VALUE SHOULD BELONG IN AN ARRAY
function getIndexToIns(arr, num) {
  // Find my place in this sorted array.
  arr.sort((a,b) => a-b );
  for(let i = 0; i < arr.length; ++i){    
    if(!(num > arr[i]) ){
      return i;
    }
  }
  return arr.length;
  // return num;
}

getIndexToIns([40, 60], 50);


//FINDING THE LETTERS OF A STRING 
// IN AN ARRAY
function mutation(arr) {
    let secondStr = arr[arr.length-1];
    for(let i = 0; i < secondStr.length; ++i){
      if(!arr[0].toLowerCase().includes(secondStr[i].toLowerCase())){
        return false;
      }
    }
    return true;
    // console.log(secondStr[0]);
}

mutation(["hello", "hey"]);


//BREAKING AN ARRAY UP AND 
//ADDING THEM INTO A MULTIDIMENSIONAL ARRAY
function chunkArrayInGroups(arr, size) {
  // Break it up.
  let endIndex = size;
  let startIndex;
  let newArr = [];
  let innerArr = [];
  for(let i = 0, startIndex = i; startIndex < arr.length; startIndex += size){
    if(startIndex == arr.length){
      innerArr = arr.slice(startIndex);
      newArr.push(innerArr);
    }
    innerArr = arr.slice(startIndex,endIndex);
    newArr.push(innerArr);
    endIndex += size;
  }
  return newArr;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);


#######################################
FCC NOTES

******************************
QUESTION THOUGHT

Consider the scenario: you are browsing the web in your browser, and want to track the tabs you have opened. Let's try to model this using some simple object-oriented code.

A Window object is made up of tabs, and you usually have more than one Window open. The titles of each open site in each Window object is held in an array. After working in the browser (opening new tabs, merging windows, and closing tabs), you want to print the tabs that are still open. Closed tabs are removed from the array and new tabs (for simplicity) get added to the end of it.

The code editor shows an implementation of this functionality with functions for tabOpen(), tabClose(), and join(). The array tabs is part of the Window object that stores the name of the open pages.

Examine the code in the editor. It's using a method that has side effects in the program, causing incorrect behaviour. The final list of open tabs, stored in finalTabs.tabs, should be ['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium', 'new tab', 'Netflix', 'YouTube', 'Vine', 'GMail', 'Work mail', 'Docs', 'freeCodeCamp', 'new tab'] but the list produced by the code is slightly different.

Change Window.prototype.tabClose so that it removes the correct tab.

******************

// tabs is an array of titles of each site open within the window
var Window = function(tabs) {
  this.tabs = tabs; // we keep a record of the array inside the object
};

// When you join two windows into one window
Window.prototype.join = function (otherWindow) {
  this.tabs = this.tabs.concat(otherWindow.tabs);
  return this;
};

// When you open a new tab at the end
Window.prototype.tabOpen = function (tab) {
  this.tabs.push('new tab'); // let's open a new tab for now
  return this;
};

// When you close a tab
Window.prototype.tabClose = function (index) {

  // Only change code below this line

  var tabsBeforeIndex = this.tabs.slice(0, index); // get the tabs before the tab
  var tabsAfterIndex = this.tabs.slice(index + 1); // get the tabs after the tab

  this.tabs = tabsBeforeIndex.concat(tabsAfterIndex); // join them together

  // Only change code above this line

  return this;
 };

// Let's create three browser windows
var workWindow = new Window(['GMail', 'Inbox', 'Work mail', 'Docs', 'freeCodeCamp']); // Your mailbox, drive, and other work sites
var socialWindow = new Window(['FB', 'Gitter', 'Reddit', 'Twitter', 'Medium']); // Social sites
var videoWindow = new Window(['Netflix', 'YouTube', 'Vimeo', 'Vine']); //  Entertainment sites

// Now perform the tab opening, closing, and other operations
var finalTabs = socialWindow
                    .tabOpen() // Open a new tab for cat memes
                    .join(videoWindow.tabClose(2)) // Close third tab in video window, and join
                    .join(workWindow.tabClose(1).tabOpen());
console.log(finalTabs.tabs);




#####################################

EXERCISE ON REFACTOR GLOBAL VARIABLES OUT OF FUNCTIONS

// the global variable
var bookList = ["The Hound of the Baskervilles", "On The Electrodynamics of Moving Bodies", "PhilosophiÃ¦ Naturalis Principia Mathematica", "Disquisitiones Arithmeticae"];

function add (arr,bookName) {
  let store = [...arr];
  store.push(bookName);
  return store; 
}

function remove (arr,bookName) {
  let newStore = [...arr];
  var book_index = newStore.indexOf(bookName);
  if (book_index >= 0) {

    newStore.splice(book_index,1);
    return newStore;

    }
}

var newBookList = add(bookList, 'A Brief History of Time');
var newerBookList = remove(bookList, 'On The Electrodynamics of Moving Bodies');
var newestBookList = remove(add(bookList, 'A Brief History of Time'), 'On The Electrodynamics of Moving Bodies');

console.log(bookList);

