/(Franklin|Eleanor)\s[a-z].\sRoosevelt|(Franklin|Eleanor)\sRoosevelt/i


/(Franklin|Eleanor)(\s[a-z].*|[a-z]*)\sRoosevelt/i;


function zeroArray(m, n) {
  // Creates a 2-D array with m rows and n columns of zeroes
  let newArray = [];
  let row = [];
  for (let i = 0; i < m; i++) {
    // Adds the m-th row into newArray

    for (let j = 0; j < n; j++) {
      // Pushes n zeroes into the current row to create the columns
      row.push(0);
    }
    // Pushes the current row, which now has n zeroes in it, to the array
    newArray.push(row);
    row = [];
  }
  return newArray;
}

let matrix = zeroArray(3, 2);
console.log(matrix);


//COLLECT ALL THE KEYS OF AN OBJECT IN AN ARRAY
/**WITHOUT USING OBJECT.KEYS METHOD**/
function getArrayOfUsers(obj) {
  // change code below this line
  let storeArr = [];
  for(let key in obj){
    storeArr.push(key);
  }
  return storeArr;
  // change code above this line
}

/*** USING OBJECT.KEYS METHOD  ****/
function getArrayOfUsers(obj) {
  // change code below this line
  let storeArr = Object.keys(obj);  
  return storeArr;
  // change code above this line
}

//SUMMARY ON OBJECTS SO FAR
You can add, modify, and remove key-value pairs, 
check if keys exist, and iterate over all the keys 
in an object. 


DATA STRUCTURE EXERCISES

LONGEST WORD IN A SENTENCE
function findLongestWordLength(str) {
  // str.split(" ");
  let arr = str.split(" ");
  let wordlen = [];
  let convToNum = 0;
  for(let i = 0; i < arr.length; ++i){
    convToNum = parseInt(arr[i].length);
    wordlen.push(convToNum);
  }
  return Math.max(...wordlen);
}

findLongestWordLength("The quick brown fox jumped over the lazy dog");


RETURN LARGEST NUMBERS IN INNER ARRAYS
function largestOfFour(arr) {
  // You can do this!
  let keeparr = [];
  for(let row=0; row < arr.length; row++){
    // console.log(Math.max(...arr[row]));
    keeparr.push(Math.max(...arr[row]));
  }
  // console.log(keeparr);
  return keeparr;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);



//REPEATING A STRING A NUMBER OF TIMES\\
function repeatStringNumTimes(str, num) {
  // repeat after me
  if(num >=0){
    let counter = 1;
    let cummStr = "";
    while(counter <= num){
      cummStr += str;
      ++counter;
    }
    console.log(cummStr);
    return cummStr;
  }else{
    return "";
  }
  return str;
}

repeatStringNumTimes("abc", 3);


